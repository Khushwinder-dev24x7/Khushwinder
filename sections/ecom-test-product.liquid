<section 
  class="product-section page-width">
  <p class="custom-section-heading lustria">{{section.settings.heading_main}}</p>
  <div class="custom-product-grid-main">
    {% for block in section.blocks %}
      {% assign product = all_products[block.settings.product] %}
      {% if product %}
      <div class="custom-product-grid-item">  
      <img src={{ product.featured_image | image_url }} style="width:100%; height:100%;">
       <div class="circle-wrap"> 
       <div class="product" 
          data-product-id="{{ product.id }}" 
          data-product-variant-color1="{{ product.metafields.custom.variant_color_1 }}" 
          data-product-variant-color2="{{ product.metafields.custom.variant_color_2 }}" 
          data-product-title="{{ product.title }}"
          data-product-description="{{ product.description | escape }}"
          data-product-image="{{ product.featured_image | image_url }}"
          data-product-price="{{ product.price | money }}"
          data-product-variants='{{ product.variants | json }}'
          style="display:block; top: {{ block.settings.position_y }}%; left: {{ block.settings.position_x }}%;"
        ><img src="https://cdn.shopify.com/s/files/1/0583/4178/5664/files/Group_1000008195.png?v=1738753278" style="max-width20px; max-height:20px;"></div>
        </div>
      </div>
      {% endif %}
    {% endfor %}
  </div>
</section>

<div class="overlay"></div>
<div class="product-modal">
  <span class="close-btn">✖</span>
  <div class="modal-content"></div>
</div>

<style>
.circle-wrap {
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0;
}
  .product-section {
    position: relative;
  }
  .custom-product-grid-item{
    position: relative;
  }
  .custom-product-grid-main {    
    display: grid;
    grid-template-columns: repeat(3,1fr);
    gap:1rem;
  }

  .product {
    position: absolute;
    width: 24px;
    height: 24px;   
    border-radius: 50%;
    cursor: pointer;
  }

  .product-modal {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: white;
    padding: 1rem 2rem;
    width: 350px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
    display: none;
    z-index: 1000;
  }

  .overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    display: none;
    z-index: 999;
  }

  .close-btn {
    display: block;
    text-align: right;
    cursor: pointer;
    font-weight: bold;
  }

  .variant-buttons {
    display: flex;
    flex-wrap: nowrap;
    gap: 5px;
    margin-bottom: 10px;
  }

  .variant-button {
    padding: 8px 12px;
    border: 1px solid #000;
    background: white;
    cursor: pointer;
  }

  .variant-button.active {
    background: black;
    color: white;
  }

  @media only screen and (max-width: 768px) {
  .custom-product-grid-main {
      grid-template-columns: repeat(2,1fr);    
  }
}
.custom-dropdown {
      position: relative;
      width: 100%;
  }

  .custom-dropdown-label {
      display: block;
      margin-bottom: 5px;
  }

 .custom-dropdown-btn {
    display: block;
    width: 100%;
    padding: 02px 10px;
    border: 1px solid #000000;
    background: rgb(255, 255, 255);
    cursor: pointer;
    text-align: left;
    position: relative;
    color:#000000;
}
 
 .custom-dropdown-btn::after {
    content: "";
    position: absolute;   
    transition: transform 0.3s ease;
    height: 100%;
    top: 0;
     background: url("https://cdn.shopify.com/s/files/1/0583/4178/5664/files/Vector.jpg?v=1738924526") no-repeat center;
    background-size: contain;
    width: 100%;
    height: 100%;
    padding-left: 10px;
    z-index: 999;
}

label.custom-dropdown-btn {
    background: linear-gradient(to right, 
    transparent calc(88% - 0.5px), /* Space before the line */
    black calc(80% - 0.4px), /* Start the black line */
    black calc(80% + 0.4px), /* End the black line */
    transparent calc(88% + 0.5px) /* Space after the line */
  );
}
  
  .custom-dropdown-content {
    position:absolute;
    width: 100%;
    background: white !important;
    border: 1px solid #000000;
    max-height: 100px;
    overflow-y: auto;
    display: none;    
    z-index:99;
}

  .custom-dropdown-content label {
    display: block;
    padding: 10px;
    cursor: pointer;
    text-align: center;
}

  .custom-dropdown-content label:hover {
      background: black;
      color: white;
  }

  /* Hide the checkbox */
  .custom-dropdown-input {
      display: none;
  }

  /* Show dropdown content when checkbox is checked */
  .custom-dropdown-input:checked + .custom-dropdown-content {
      display: block;
  }

  /* Rotate arrow icon when dropdown is open */
  .custom-dropdown-input:checked + .custom-dropdown-content + .custom-dropdown-btn::after {
      transform: rotate(180deg);
  }
  .product-info-wrap {
      display: grid;
      grid-template-columns: 40% 60%;
      gap: 1rem;
  }
  .product-info-wrap p {
      margin: unset !important;
  }

  p.custom-section-heading {
      font-size: 3rem;
      margin: 1rem 0 0 0;
  }
  span.variant-button-color-badge {   
    height: 100%;
    width: 5px;
    border-top: 1px solid #000000;
    border-bottom: 1px solid #000000;
    border-left: 1px solid #000000;    
}
.variant-button-color-wrap {
    display: flex;
}
.custom-dropdown-content {
    -ms-overflow-style: none; /* Hides scrollbar in IE/Edge */
    scrollbar-width: none; /* Hides scrollbar in Firefox */
}

.custom-dropdown-content::-webkit-scrollbar {
    display: none; /* Hides scrollbar in Chrome, Safari */
}
.product-info-wrap .description {
    font-size: 1.2rem;
}
</style>

<script>
document.addEventListener("DOMContentLoaded", function () {
  const products = document.querySelectorAll(".product");
  const modal = document.querySelector(".product-modal");
  const overlay = document.querySelector(".overlay");
  const modalContent = document.querySelector(".modal-content");
  const closeModal = document.querySelector(".close-btn");

  products.forEach(product => {
    product.addEventListener("click", function () {
      const productId = this.dataset.productId;
      const productColor1 = this.dataset.productVariantColor1;
      const productColor2 = this.dataset.productVariantColor2;
      const productTitle = this.dataset.productTitle;
      const productDescription  = this.dataset.productDescription ;
      const productImage = this.dataset.productImage;
      let productVariants = [];
      window.gProductColor1 = productColor1;
      window.gProductColor2 = productColor2;

      try {
        productVariants = JSON.parse(this.dataset.productVariants);
        console.log('I am data');
        console.log(JSON.parse(this.dataset.productVariants));
      } catch (error) {
        console.error("Error parsing product variants:", error);
      }

      // Extract unique colors and sizes
      let sizes = [...new Set(productVariants.map(v => v.option1))];
      let colors = [...new Set(productVariants.map(v => v.option2))];

     let colorHtml = colors.map((color, index) => {
    let colorVariant = `gProductColor${index + 1}`; // productColor1, productColor2, etc.
        return `<div class="variant-button-color-wrap" style="width:100%;">
                    <span class="variant-button-color-badge" style="background:${window[colorVariant]};"></span>
                    <button class="variant-button color-option" data-value="${color}" style="width:100%;">${color}</button>
                </div>`;
    }).join("");

      let sizeHtml = sizes.map(size => `<label for="custom-dropdown-toggle" class="size-option" data-value="${size}">${size}</label>`).join("");

      modalContent.innerHTML = `
      <div class="product-info-wrap">
        <div class="product-img">    
          <img src="${productImage}" alt="${productTitle}" style="width:100%; height:auto;">    
        </div>
        <div class="product-details">    
           <p class="title">${productTitle}</p>
           <p class="price" id="product-price">${productVariants[0].price / 100}</p>
           <div class="description">${productDescription}</div>                  
        </div>
      </div>

      <div class="product-variations-wrap" style="min-height:255px;"> 
        <div>
          <label>Color:</label>
          <div class="variant-buttons" id="color-options">${colorHtml}</div>
        </div>

        <div class="custom-dropdown">
            <label class="custom-dropdown-label">Size:</label>
            <label id="size-variant-main-text" class="custom-dropdown-btn" for="custom-dropdown-toggle">Choose your size</label>
            <div class="">
              <input type="checkbox" id="custom-dropdown-toggle" class="custom-dropdown-input" style="display:none;">
              <div class="custom-dropdown-content variant-buttons" id="size-options">
                  ${sizeHtml}
              </div>
            </div>            
          </div>
        <div>
      <div>
        
        <button id="add-to-cart" class="button button--primary" disabled style="width:100%; margin:5rem 0 0 0;">ADD TO CART →</button>
      `;

      modal.style.display = "block";
      overlay.style.display = "block";

      let selectedColor = null;
      let selectedSize = null;

      function updateVariantSelection() {
        const selectedVariant = productVariants.find(v => v.option1 === selectedSize && v.option2 === selectedColor);
        const addToCartButton = document.getElementById("add-to-cart");

        if (selectedVariant) {
          document.getElementById("product-price").innerHTML = `Price: ${selectedVariant.price / 100}`;
          addToCartButton.removeAttribute("disabled");
          addToCartButton.setAttribute("data-variant-id", selectedVariant.id);
        } else {
          addToCartButton.setAttribute("disabled", "true");
        }
      }

      document.querySelectorAll(".color-option").forEach(button => {
        button.addEventListener("click", function () {
          document.querySelectorAll(".color-option").forEach(btn => btn.classList.remove("active"));
          this.classList.add("active");
          selectedColor = this.dataset.value;
          updateVariantSelection();
        });
      });

      document.querySelectorAll(".size-option").forEach(button => {
        button.addEventListener("click", function () {
          document.querySelectorAll(".size-option").forEach(btn => btn.classList.remove("active"));
          this.classList.add("active");
          selectedSize = this.dataset.value;
          document.querySelector('#size-variant-main-text').innerText =selectedSize;

          updateVariantSelection();
        });
      });

      document.getElementById("add-to-cart").addEventListener("click", function () {
        const variantId = this.getAttribute("data-variant-id");
        if (variantId) {
          addToCart(variantId);
        }
      });
    });
  });

  closeModal.addEventListener("click", function () {
    modal.style.display = "none";
    overlay.style.display = "none";
  });

  overlay.addEventListener("click", function () {
    modal.style.display = "none";
    overlay.style.display = "none";
  });

  function addToCart(variantId) {
    fetch('/cart/add.js', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ id: variantId, quantity: 1 })
    })
    .then(response => response.json())
    .then(data => {
      alert("Item added to cart!");
      modal.style.display = "none";
      overlay.style.display = "none";
    })
    .catch(error => console.error("Error adding to cart:", error));
  }

});
</script>

{% schema %}
{
  "name": "Ecom Test Products",
  "settings": [
    {
      "type": "text",
      "id": "heading_main",
      "label": "Headin",
      "default": "Heading"
    }
  ],
  "blocks": [
    {
      "type": "product",
      "name": "Product product",
      "settings": [
        {
          "type": "product",
          "id": "product",
          "label": "Select Product"
        },
        {
          "type": "range",
          "id": "position_x",
          "label": "X Position (%)",
          "min": 0,
          "max": 100,
          "step": 1,
          "default": 50
        },
        {
          "type": "range",
          "id": "position_y",
          "label": "Y Position (%)",
          "min": 0,
          "max": 100,
          "step": 1,
          "default": 50
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Ecom Test Products",
      "category": "Custom"
    }
  ]
}
{% endschema %}
